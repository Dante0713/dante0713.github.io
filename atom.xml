<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>坐下談談</title>
  
  <subtitle>談生活, 談工作</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dante0713.github.io/"/>
  <updated>2020-05-01T12:54:21.062Z</updated>
  <id>https://dante0713.github.io/</id>
  
  <author>
    <name>Dante Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>30天API學習日誌 - 3</title>
    <link href="https://dante0713.github.io/2020/05/01/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-3/"/>
    <id>https://dante0713.github.io/2020/05/01/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-3/</id>
    <published>2020-04-30T16:18:56.000Z</published>
    <updated>2020-05-01T12:54:21.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><p>今天建立web api 內容，參照youtube影片<a href="https://www.youtube.com/watch?v=6qfE-lwRLuY" target="_blank" rel="noopener">Laravel 6 Api tutorial #1 basic API</a>進行學習<a id="more"></a>，<br>在進入之前，系統頁面告訴我他找不到/var/vision-bank/storage/logs/laravel.log檔案，以及權限不足問題，這是在建立laravel時沒有初始化cache,log的結果，使用指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#php artisan config:cache</span><br><span class="line">#php artisan config:clear</span><br><span class="line">#composer dump-autoload -o</span><br></pre></td></tr></table></figure><p>告訴laravel你要啟用config即可自動創造log檔，記得設定好權限給網頁開啟應該就沒有問題了</p><p>那今天教學影片中，大概分為五個步驟</p><ol><li>製造controller, router提供路徑讀取api</li><li>設定好該project用之Database設定檔</li><li>產生Model檔</li><li>寫好Model及controller的內容</li><li>測試API</li></ol><h3 id="1-製造controller-router提供路徑讀取api"><a href="#1-製造controller-router提供路徑讀取api" class="headerlink" title="1. 製造controller, router提供路徑讀取api"></a>1. 製造controller, router提供路徑讀取api</h3><h4 id="1-1-利用以下指令創造controller"><a href="#1-1-利用以下指令創造controller" class="headerlink" title="1.1. 利用以下指令創造controller"></a>1.1. 利用以下指令創造controller</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller Users</span><br></pre></td></tr></table></figure><h4 id="1-2-在Users-controller中寫入function-list-的空function"><a href="#1-2-在Users-controller中寫入function-list-的空function" class="headerlink" title="1.2. 在Users controller中寫入function list(){}的空function"></a>1.2. 在Users controller中寫入function list(){}的空function</h4><h4 id="1-3-在routes-api-php寫入‘Users-list’的路徑-gt-’list’，寫做"><a href="#1-3-在routes-api-php寫入‘Users-list’的路徑-gt-’list’，寫做" class="headerlink" title="1.3. 在routes/api.php寫入‘Users@list’的路徑=&gt;’list’，寫做"></a>1.3. 在routes/api.php寫入‘Users@list’的路徑=&gt;’list’，寫做</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&#39;list&#39;,&#39;Users@list&#39;);</span><br></pre></td></tr></table></figure><h3 id="2-設定好該project用之Database設定檔"><a href="#2-設定好該project用之Database設定檔" class="headerlink" title="2. 設定好該project用之Database設定檔"></a>2. 設定好該project用之Database設定檔</h3><p>該檔案位置在./.env檔中<br>記得</p><h4 id="2-1-設定好mysql的使用者-密碼"><a href="#2-1-設定好mysql的使用者-密碼" class="headerlink" title="2.1. 設定好mysql的使用者, 密碼"></a>2.1. 設定好mysql的使用者, 密碼</h4><h4 id="2-2-建立此專案專屬的mysql的資料庫，我在此-create-database-vision"><a href="#2-2-建立此專案專屬的mysql的資料庫，我在此-create-database-vision" class="headerlink" title="2.2. 建立此專案專屬的mysql的資料庫，我在此(create database vision;)"></a>2.2. 建立此專案專屬的mysql的資料庫，我在此(create database vision;)</h4><h4 id="2-3-接下來填寫好-env設定檔並使用artisan指令重啟project設定"><a href="#2-3-接下來填寫好-env設定檔並使用artisan指令重啟project設定" class="headerlink" title="2.3. 接下來填寫好.env設定檔並使用artisan指令重啟project設定"></a>2.3. 接下來填寫好.env設定檔並使用artisan指令重啟project設定</h4><p>我的測試例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">DB_CONNECTION&#x3D;mysql</span><br><span class="line">DB_HOST&#x3D;127.0.0.1</span><br><span class="line">DB_PORT&#x3D;3306</span><br><span class="line">DB_DATABASE&#x3D;&quot;vision&quot;</span><br><span class="line">DB_USERNAME&#x3D;&quot;root&quot;</span><br><span class="line">DB_PASSWORD&#x3D;&quot;root1234&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>artisan更新project設定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan serve</span><br></pre></td></tr></table></figure><h3 id="3-產生Model檔"><a href="#3-產生Model檔" class="headerlink" title="3. 產生Model檔"></a>3. 產生Model檔</h3><p>使用指令產生Model檔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model User</span><br></pre></td></tr></table></figure><h3 id="4-寫好Model及controller的內容"><a href="#4-寫好Model及controller的內容" class="headerlink" title="4. 寫好Model及controller的內容"></a>4. 寫好Model及controller的內容</h3><h4 id="4-1-先在剛建造的controller-Users-當中引入Model，之後即可開始測試"><a href="#4-1-先在剛建造的controller-Users-當中引入Model，之後即可開始測試" class="headerlink" title="4.1. 先在剛建造的controller(Users)當中引入Model，之後即可開始測試"></a>4.1. 先在剛建造的controller(Users)當中引入Model，之後即可開始測試</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">use App\User; &#x2F;&#x2F;引入</span><br><span class="line">class Users extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    function list()&#123;</span><br><span class="line">        return User::all(); &#x2F;&#x2F;controller回傳Model中包好的function資料</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="5-測試API"><a href="#5-測試API" class="headerlink" title="5. 測試API"></a>5. 測試API</h3><p>此時用 <a href="https://your-ip/api/list即可看到資料庫中user的資料" target="_blank" rel="noopener">https://your-ip/api/list即可看到資料庫中user的資料</a></p><p>如此一來Base API完成了! 今天就先到這吧XD</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Day3&quot;&gt;&lt;a href=&quot;#Day3&quot; class=&quot;headerlink&quot; title=&quot;Day3&quot;&gt;&lt;/a&gt;Day3&lt;/h2&gt;&lt;p&gt;今天建立web api 內容，參照youtube影片&lt;a href=&quot;https://www.youtube.com/watch?v=6qfE-lwRLuY&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Laravel 6 Api tutorial #1 basic API&lt;/a&gt;進行學習
    
    </summary>
    
    
      <category term="實作課" scheme="https://dante0713.github.io/categories/%E5%AF%A6%E4%BD%9C%E8%AA%B2/"/>
    
    
      <category term="實作 30天學習日誌 WEB API" scheme="https://dante0713.github.io/tags/%E5%AF%A6%E4%BD%9C-30%E5%A4%A9%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-WEB-API/"/>
    
  </entry>
  
  <entry>
    <title>30天API學習日誌 - 2</title>
    <link href="https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-2/"/>
    <id>https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-2/</id>
    <published>2020-04-30T09:56:37.000Z</published>
    <updated>2020-04-30T10:16:49.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>今天目標在把Laravel上線，決定先使用IP方式直連測試，安裝Laravel的過程中DigitalOcean的5美金專案，其記憶體空間不夠，升至15美金3GB才順利安裝好Laravel<a id="more"></a>，否則composer完全動不起來:(<br>接下來進行Nginx的連接，設定檔位置deault在 /etc/nginx/sites-enabled/default &amp; /etcnginx/sites-available/default 記得nginx其中root位置不要進到http拜訪不到的資料夾中(例:root)<br>nginx找到public/index.php之後讀取的vendor資料夾找不到，才發現在使用指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project laravel&#x2F;laravel your-project-name --prefer-dist</span><br></pre></td></tr></table></figure><p>創立時發生出錯</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">laravel&#x2F;framework v7.8.1 requires ext-mbstring * -&gt; the requested PHP extension mbstring is missing from your system.</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>這類缺少PHP元件的問題都會導致laravel創立檔案時失去vendor資料夾，我們把缺的物件(php-mbstring,php-xml)用指令補齊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php-mbstring &amp; sudo apt-get install php-xml</span><br></pre></td></tr></table></figure><p>到這裡已經出現img.1畫面，雖然Database還沒設定好但基本的Laravel資料已可看見，今天就先到這裡。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Day-2&quot;&gt;&lt;a href=&quot;#Day-2&quot; class=&quot;headerlink&quot; title=&quot;Day 2&quot;&gt;&lt;/a&gt;Day 2&lt;/h2&gt;&lt;p&gt;今天目標在把Laravel上線，決定先使用IP方式直連測試，安裝Laravel的過程中DigitalOcean的5美金專案，其記憶體空間不夠，升至15美金3GB才順利安裝好Laravel
    
    </summary>
    
    
      <category term="WEB API" scheme="https://dante0713.github.io/categories/WEB-API/"/>
    
    
      <category term="實作" scheme="https://dante0713.github.io/tags/%E5%AF%A6%E4%BD%9C/"/>
    
      <category term="30天學習日誌" scheme="https://dante0713.github.io/tags/30%E5%A4%A9%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C/"/>
    
      <category term="DigitalOcean" scheme="https://dante0713.github.io/tags/DigitalOcean/"/>
    
  </entry>
  
  <entry>
    <title>30天API學習日誌 - 1</title>
    <link href="https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-1/"/>
    <id>https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-1/</id>
    <published>2020-04-30T09:52:43.000Z</published>
    <updated>2020-04-30T10:16:54.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>原本在DigitalOcean使用centos進行架設，當時沒想到使用ssh連接，反而用系統中的access console window下command，其過程總是延遲之後決定回頭設定ssh key</p><a id="more"></a><p>(注意: 在建立好的Droplets (機器在此平台接稱為Droplets，很有趣的設定) 要前往ACCOUNT-&gt;Settings-&gt;Security-&gt;SSH keys當中設定 (很難找找很久))，但設定完總是無法遠端連線(這邊嘗試過ssh-keygen以及puttygen兩種方式，皆失敗)，一直出現<a href="https://blog.csdn.net/qq_36523839/article/details/78885216" target="_blank" rel="noopener">Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)</a>警告，後來使用Ubuntu<br>+puttygen很快就解決了所有問題，也透過<a href="https://www.opencli.com/linux/ubuntu-16-04-install-nginx-mysql-php-lemp" target="_blank" rel="noopener">Ubuntu 16.04 安裝 Nginx, MySQL, PHP (LEMP)</a>這篇文章解決了 nginx-mysql-php 三項安裝，測試過後準備進行Laravel以及Vue.js框架建設，<br>但此時已經深夜2:19分，晚安。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h2&gt;&lt;p&gt;原本在DigitalOcean使用centos進行架設，當時沒想到使用ssh連接，反而用系統中的access console window下command，其過程總是延遲之後決定回頭設定ssh key&lt;/p&gt;
    
    </summary>
    
    
      <category term="DigitalOcean" scheme="https://dante0713.github.io/categories/DigitalOcean/"/>
    
    
      <category term="實作" scheme="https://dante0713.github.io/tags/%E5%AF%A6%E4%BD%9C/"/>
    
      <category term="30天學習日誌" scheme="https://dante0713.github.io/tags/30%E5%A4%A9%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C/"/>
    
      <category term="DigitalOcean" scheme="https://dante0713.github.io/tags/DigitalOcean/"/>
    
  </entry>
  
  <entry>
    <title>30天API學習日誌 - 0</title>
    <link href="https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-0/"/>
    <id>https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-0/</id>
    <published>2020-04-30T09:47:48.000Z</published>
    <updated>2020-04-30T10:16:59.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起由"><a href="#起由" class="headerlink" title="起由"></a>起由</h2><p>在公司低靡的環境下，試圖找尋學習的機會，並且在練習中習得新技能，目前舊有技能為以下列表</p><a id="more"></a><ul><li>模組化程式經驗</li><li>平台系統分析</li><li>使用Git版本控制經驗</li><li>使用(Docker container)PHP+Doctrine(ORM)+MySQL+MongoDB開發平台</li><li>利用Linux CentOS7 + Docker建立開發環境</li><li>使用NoSQL經驗(MongoDB)</li><li>Zend Framework 3 + Twig</li></ul><p>而希望在本次習得Web oauth REST API 以及 前端引擎Vue的運用方式。<br>此次預計建立一個影視版的人力銀行作為練習，架構為以下列表:</p><p>使用機器: DigitalOcean 15美元 Ubuntu 18.04.3<br>遠端操控: putty<br>前端引擎: vue =&gt; <a href="https://5xruby.tw/posts/how-to-create-maskmap-by-vuejs-and-osm/?fbclid=IwAR26ae2QYi_gMiUZxNHMGtD3gtMiQ7SvnveIr3lRdKNacPOg7olzrPXIWNc" target="_blank" rel="noopener">Vue 口罩地圖實作練習</a><br>後端web api: Laravel =&gt; <a href="https://laravel.tw/docs/4.2/quick#installation" target="_blank" rel="noopener">Laravel安裝</a>, <a href="https://www.youtube.com/watch?v=6qfE-lwRLuY&list=PL8p2I9GklV44rius9tPPXxPnuH0Yb27B4" target="_blank" rel="noopener">Laravel WEB API Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起由&quot;&gt;&lt;a href=&quot;#起由&quot; class=&quot;headerlink&quot; title=&quot;起由&quot;&gt;&lt;/a&gt;起由&lt;/h2&gt;&lt;p&gt;在公司低靡的環境下，試圖找尋學習的機會，並且在練習中習得新技能，目前舊有技能為以下列表&lt;/p&gt;
    
    </summary>
    
    
      <category term="實作起源" scheme="https://dante0713.github.io/categories/%E5%AF%A6%E4%BD%9C%E8%B5%B7%E6%BA%90/"/>
    
    
      <category term="實作" scheme="https://dante0713.github.io/tags/%E5%AF%A6%E4%BD%9C/"/>
    
      <category term="30天學習日誌" scheme="https://dante0713.github.io/tags/30%E5%A4%A9%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C/"/>
    
      <category term="WEB API" scheme="https://dante0713.github.io/tags/WEB-API/"/>
    
      <category term="Vue" scheme="https://dante0713.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
