<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>坐下談談</title>
  
  <subtitle>談生活, 談工作</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dante0713.github.io/"/>
  <updated>2020-05-04T15:56:24.433Z</updated>
  <id>https://dante0713.github.io/</id>
  
  <author>
    <name>Dante Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux Laravel資料夾權限控管</title>
    <link href="https://dante0713.github.io/2020/05/04/Linux-Laravel%E8%B3%87%E6%96%99%E5%A4%BE%E6%AC%8A%E9%99%90%E6%8E%A7%E7%AE%A1/"/>
    <id>https://dante0713.github.io/2020/05/04/Linux-Laravel%E8%B3%87%E6%96%99%E5%A4%BE%E6%AC%8A%E9%99%90%E6%8E%A7%E7%AE%A1/</id>
    <published>2020-05-04T14:55:28.000Z</published>
    <updated>2020-05-04T15:56:24.433Z</updated>
    
    <content type="html"><![CDATA[<p>今天要談一些基本觀念，前幾天跟學長討論時聊到permission問題，相信很多初學者，包含我都習慣用root 與777去帶入所有PHP框架資料夾，但開啟777權限其實是開放任何人都可以讀取/寫入並執行你的程式碼，也就是你把權限全部都開給人家了 (迷之音: 媽媽有沒有跟你說過就算在談戀愛也不要把心都放在男/女朋友身上? 不然你失戀就死定了!)</p><a id="more"></a><p>(這個例子舉的不是很好，因為在場的各位可能都沒有交過男/女朋友 :P (拜託別打臉~ 我靠臉吃飯)</p><p>P.S. 以下內容源自於此篇文章<a href="https://stackoverflow.com/questions/30639174/how-to-set-up-file-permissions-for-laravel" target="_blank" rel="noopener">How to set up file permissions for Laravel?</a>，我只是幫忙翻譯，順便學習紀錄而已</p><ul><li>在此提供Linux指令資料庫搜尋還蠻方便使用的工具: <a href="https://wangchujiang.com/linux-command/" target="_blank" rel="noopener">Linux command(中字)</a></li></ul><p>那我們該怎麼處理資料權限的問題? 又要給用戶看到網站，又要保持程式碼與資料的安全性</p><h3 id="1-設定資料夾授權給你網站伺服器的用戶"><a href="#1-設定資料夾授權給你網站伺服器的用戶" class="headerlink" title="1. 設定資料夾授權給你網站伺服器的用戶"></a>1. 設定資料夾授權給你網站伺服器的用戶</h3><p>假設你的用戶叫做www-data，設定資料夾權限給www-data用戶</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R www-data:www-data &#x2F;path&#x2F;to&#x2F;your&#x2F;laravel&#x2F;root&#x2F;directory</span><br></pre></td></tr></table></figure><p>但如果這麼做，網站伺服器的用戶將會擁有你的所有這個路徑底下檔案的所有權限，同時利用FTP連動文件的進行開發者也會在上傳文件時遇到問題，因為FTP登入的身分可能與網路伺服器用戶不同，所以請先把你用來FTP登入的帳號添加到網路伺服器用戶組中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G www-data 你的用戶</span><br></pre></td></tr></table></figure><p>然後將所有目錄設置為755，將文件設置為644</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find &#x2F;path&#x2F;to&#x2F;your&#x2F;laravel&#x2F;root&#x2F;directory -type f -exec chmod 644 &#123;&#125; \;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find &#x2F;path&#x2F;to&#x2F;your&#x2F;laravel&#x2F;root&#x2F;directory -type d -exec chmod 755 &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>以上這兩句只差在find的type 一個是f(普通文件) 一個是d(目錄)</p><h3 id="2-將你的用戶設定為資料夾的擁有者"><a href="#2-將你的用戶設定為資料夾的擁有者" class="headerlink" title="2. 將你的用戶設定為資料夾的擁有者"></a>2. 將你的用戶設定為資料夾的擁有者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R 我的用戶：www-data &#x2F;path&#x2F;to&#x2F;your&#x2F;laravel&#x2F;root&#x2F;directory</span><br></pre></td></tr></table></figure><p>此指令當中將擁有者設定為: 我的用戶<br>而擁有的群組設定為: www-data<br>並且加上-R表示遞迴的把所有底下資料夾都設為此權限設定</p><p>之後再更仔細的設定檔案及資料夾的權限代號</p><p>find命令: 用來在指定目錄下查找文件。<br>-exec&lt;執行指令&gt;：假設find指令的回傳為True，就執行該指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo find &#x2F;path&#x2F;to&#x2F;your&#x2F;laravel&#x2F;root&#x2F;directory -type f -exec chmod 664 &#123;&#125; \;</span><br><span class="line">sudo find &#x2F;path&#x2F;to&#x2F;your&#x2F;laravel&#x2F;root&#x2F;directory -type d -exec chmod 775 &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>設定完程式碼的控制權之後，最後設定網頁使用者的觀看權 (Laravel中的storage, cache)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chgrp -R www-data storage bootstrap&#x2F;cache</span><br><span class="line">sudo chmod -R ug+rwx storage bootstrap&#x2F;cache</span><br></pre></td></tr></table></figure><p>接下來你的網站伺服器就既擁有基本的資安能力，又能開發的順暢囉!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天要談一些基本觀念，前幾天跟學長討論時聊到permission問題，相信很多初學者，包含我都習慣用root 與777去帶入所有PHP框架資料夾，但開啟777權限其實是開放任何人都可以讀取/寫入並執行你的程式碼，也就是你把權限全部都開給人家了 (迷之音: 媽媽有沒有跟你說過就算在談戀愛也不要把心都放在男/女朋友身上? 不然你失戀就死定了!)&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="file permission" scheme="https://dante0713.github.io/tags/file-permission/"/>
    
      <category term="linux" scheme="https://dante0713.github.io/tags/linux/"/>
    
      <category term="laravel" scheme="https://dante0713.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>30天API學習日誌 - 4</title>
    <link href="https://dante0713.github.io/2020/05/02/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-4/"/>
    <id>https://dante0713.github.io/2020/05/02/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-4/</id>
    <published>2020-05-02T12:08:27.000Z</published>
    <updated>2020-05-02T16:35:26.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2><h2 id="今日目標"><a href="#今日目標" class="headerlink" title="今日目標"></a>今日目標</h2><p>今天是要建立Laravel OAuth 2認證，以利於API資料索取安全控管，並且參照youtube影片<a href="https://www.youtube.com/watch?v=0hGsLgnrk68&t=80s" target="_blank" rel="noopener">Laravel 6 Api tutorial #2 Api authentication</a>進行學習。<a id="more"></a></p><h2 id="OAuth-2"><a href="#OAuth-2" class="headerlink" title="OAuth 2"></a>OAuth 2</h2><p>在開始之前我們可以先認識什麼是OAuth 2核發認證，以及基本的流程: <a href="https://openhome.cc/Gossip/Spring/OAuth2Flows.html" target="_blank" rel="noopener">OAuth 2 流程圖解</a></p><p>OAuth 2大概可以想像成一個組織進行活動(瀏覽網頁)時，組織外包的遊覽車(客戶端)、報到服務處(授權伺服器)、大會會場內部(資源伺服器)<br>當我們透過瀏覽車載到大會會場時，需要先去報到服務處報到(Client Credentials)，並取得入場QRcode(核發Access Token)，只要拿到這個QRcode我們就可以在大會裡玩各式各樣的遊樂設施(用Access Token請求資源)。</p><p>更詳細的內容在<a href="https://openhome.cc/Gossip/Spring/OAuth2Flows.html" target="_blank" rel="noopener">OAuth 2 流程圖解</a>可以繼續給他看下去。</p><h2 id="熱血開code"><a href="#熱血開code" class="headerlink" title="熱血開code~"></a>熱血開code~</h2><p>今天我們將透過Laravel的Passport函式庫進行OAuth2的認證程序，所以我們要把之前建立的資料表轉成OAuth2結構型態的資料表，在這邊可以先把之前記錄下來在Mysql中的資料備檔後，將我們指定的database清空，並拿來進行OAuth2結構轉型，大概的步驟如下。</p><p>那今天教學影片中，大概分為四個步驟</p><ol><li>Laravel安裝Passport</li><li>Passport設定檔(config)之於Auth service以及UserEntity資料設定</li><li>API Route設定</li><li>寫好Model及controller的內容</li><li>測試API</li></ol><h3 id="1-Laravel安裝Passport"><a href="#1-Laravel安裝Passport" class="headerlink" title="1. Laravel安裝Passport"></a>1. Laravel安裝Passport</h3><h4 id="1-1-利用以下指令安裝Laravel-OAuth2相關的套件-gt-Passport"><a href="#1-1-利用以下指令安裝Laravel-OAuth2相關的套件-gt-Passport" class="headerlink" title="1.1. 利用以下指令安裝Laravel OAuth2相關的套件=&gt;Passport"></a>1.1. 利用以下指令安裝Laravel OAuth2相關的套件=&gt;Passport</h4><p>先進入您的專案資料夾中，並利用composer安裝package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require laravel&#x2F;passport</span><br></pre></td></tr></table></figure><h4 id="1-2-安排套件設定檔，service-provider"><a href="#1-2-安排套件設定檔，service-provider" class="headerlink" title="1.2. 安排套件設定檔，service provider"></a>1.2. 安排套件設定檔，service provider</h4><p>在使用安裝好的passport套件，必須先建立設定檔，讓Laravel知道安裝的套件在哪裡、決定啟用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- config/app.php</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="string">'providers'</span> =&gt;[</span><br><span class="line">    Laravel\Passport\PassportServiceProvider::class,</span><br><span class="line">],</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="1-3-reload設定"><a href="#1-3-reload設定" class="headerlink" title="1.3. reload設定"></a>1.3. reload設定</h4><p>套用指令 (常常看到artisan的出現，林北又不認識，下一篇我們來講artisan到底是尛)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate</span><br><span class="line">php artisan passport:install</span><br></pre></td></tr></table></figure><h3 id="2-Passport設定檔-config-之於Auth-service以及UserEntity資料設定"><a href="#2-Passport設定檔-config-之於Auth-service以及UserEntity資料設定" class="headerlink" title="2. Passport設定檔(config)之於Auth service以及UserEntity資料設定"></a>2. Passport設定檔(config)之於Auth service以及UserEntity資料設定</h3><p>如果照著上一篇順著做下來，當初在創立時已有app/User.php<br>這個步驟主要是要讓User的資料表與註冊、登出的流程中，嫁接入OAuth 2套件 - Passport<br>所以，我們要讓UserEntity檔認識誰是 Passport</p><h4 id="2-1-讓主人-User-看看"><a href="#2-1-讓主人-User-看看" class="headerlink" title="2.1. 讓主人(User)看看"></a>2.1. 讓主人(User)看看</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">- app/User.php</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Laravel</span>\<span class="title">Passport</span>\<span class="title">HasApiTokens</span>; <span class="comment">// 加入HasApiTokens準備檢查Token, Scope用</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">MustVerifyEmail</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">HasApiTokens</span>,<span class="title">Notifiable</span>;<span class="comment">// 加入HasApiTokens準備檢查Token, Scope用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The attributes that are mass assignable.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> $fillable = [</span><br><span class="line">        <span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The attributes that should be hidden for arrays.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> $hidden = [</span><br><span class="line">        <span class="string">'password'</span>, <span class="string">'remember_token'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The attributes that should be cast to native types.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> $casts = [</span><br><span class="line">        <span class="string">'email_verified_at'</span> =&gt; <span class="string">'datetime'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-主人-你誰-我管家-AuthService-說不認識你"><a href="#2-2-主人-你誰-我管家-AuthService-說不認識你" class="headerlink" title="2.2. 主人:你誰? 我管家(AuthService)說不認識你"></a>2.2. 主人:你誰? 我管家(AuthService)說不認識你</h4><p>之後，埋入Passport的路徑，讓登入時可以自動連到Passport功能，並再順利地傳出去Passport的OAuth相關資訊</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- app/Providers/AuthServiceProvider.php</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Laravel</span>\<span class="title">Passport</span>\<span class="title">Passport</span>; <span class="comment">//引入怕死破斗</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Gate</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Support</span>\<span class="title">Providers</span>\<span class="title">AuthServiceProvider</span> <span class="title">as</span> <span class="title">ServiceProvider</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The policy mappings for the application.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">protected</span> $policies = [</span><br><span class="line">        <span class="string">'App\Model'</span> =&gt; <span class="string">'App\Policies\ModelPolicy'</span>,</span><br><span class="line">    ];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Register any authentication / authorization services.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;registerPolicies();</span><br><span class="line">        Passport::routes(); <span class="comment">//我虔誠的祈禱，請OAuth2回應我，並賜與我神秘的力量~!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-管家-你註冊好了，去簽到吧"><a href="#2-3-管家-你註冊好了，去簽到吧" class="headerlink" title="2.3. 管家: 你註冊好了，去簽到吧~"></a>2.3. 管家: 你註冊好了，去簽到吧~</h4><p>接下來讓Laravel的auth service設定檔紀載我們決定要使用Passport作為我們開放資源的功能之一</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- config/auth.php</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'guards'</span> =&gt; [</span><br><span class="line">        <span class="string">'web'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'session'</span>,</span><br><span class="line">            <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'api'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'passport'</span>, <span class="comment">//修改drive，讓怕死破斗成為我們的奴隸~ 哇哈哈哈哈!</span></span><br><span class="line">            <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-API-Route設定"><a href="#3-API-Route設定" class="headerlink" title="3. API Route設定"></a>3. API Route設定</h3><p>接下來就是令人興奮的Route設定，只要接上，就可以從外面(瀏覽器)看到裡面(取得網站資源)，好害羞好害羞地~</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- routes/api.php</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">...</span><br><span class="line">    Route::post(<span class="string">'login'</span>, <span class="string">'API\UserController@login'</span>);</span><br><span class="line">    Route::post(<span class="string">'register'</span>, <span class="string">'API\UserController@register'</span>);</span><br><span class="line">    Route::group([<span class="string">'middleware'</span> =&gt; <span class="string">'auth:api'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Route::post(<span class="string">'details'</span>, <span class="string">'API\UserController@details'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">...</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="4-寫好controller的內容"><a href="#4-寫好controller的內容" class="headerlink" title="4. 寫好controller的內容"></a>4. 寫好controller的內容</h3><h4 id="4-1-controller要做的事"><a href="#4-1-controller要做的事" class="headerlink" title="4.1. controller要做的事"></a>4.1. controller要做的事</h4><p>在這裡我們將在controller當中寫入註冊(可以取得Token), 登入(可以取得Token), 用戶列表(取得Token之後才能進行的事情)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">API</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Validator</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $successStatus = <span class="number">200</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * login api</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Auth::attempt([<span class="string">'email'</span> =&gt; request(<span class="string">'email'</span>), <span class="string">'password'</span> =&gt; request(<span class="string">'password'</span>)]))&#123;</span><br><span class="line">            $user = Auth::user();</span><br><span class="line">            $success[<span class="string">'token'</span>] =  $user-&gt;createToken(<span class="string">'MyApp'</span>)-&gt; accessToken;<span class="comment">// MyApp可以帶入你自己的project name</span></span><br><span class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'success'</span> =&gt; $success], <span class="keyword">$this</span>-&gt; successStatus);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span>=&gt;<span class="string">'Unauthorised'</span>], <span class="number">401</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Register api</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//這一段在進行validation，很重要，在瀏覽頁可以回傳欄位錯誤的json資料回去</span></span><br><span class="line">        $validator = Validator::make($request-&gt;all(), [</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">            <span class="string">'email'</span> =&gt; <span class="string">'required|email'</span>,</span><br><span class="line">            <span class="string">'password'</span> =&gt; <span class="string">'required'</span>,</span><br><span class="line">            <span class="string">'c_password'</span> =&gt; <span class="string">'required|same:password'</span>,</span><br><span class="line">        ]);</span><br><span class="line">        <span class="keyword">if</span> ($validator-&gt;fails()) &#123;</span><br><span class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span>=&gt;$validator-&gt;errors()], <span class="number">401</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//這裡才是開始處理資料</span></span><br><span class="line">        $input = $request-&gt;all();</span><br><span class="line">        $input[<span class="string">'password'</span>] = bcrypt($input[<span class="string">'password'</span>]);</span><br><span class="line">        $user = User::create($input);</span><br><span class="line">        $success[<span class="string">'token'</span>] =  $user-&gt;createToken(<span class="string">'MyApp'</span>)-&gt; accessToken;<span class="comment">// MyApp可以帶入你自己的project name</span></span><br><span class="line">        $success[<span class="string">'name'</span>] =  $user-&gt;name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'success'</span>=&gt;$success], <span class="keyword">$this</span>-&gt; successStatus);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * details api</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">details</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user = Auth::user();</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'success'</span> =&gt; $user], <span class="keyword">$this</span>-&gt; successStatus);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="4-2-重新Run一次"><a href="#4-2-重新Run一次" class="headerlink" title="4.2. 重新Run一次"></a>4.2. 重新Run一次</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan serve</span><br></pre></td></tr></table></figure><h3 id="5-測試API"><a href="#5-測試API" class="headerlink" title="5. 測試API"></a>5. 測試API</h3><p>我們可以透過post man進行API測試，來! 看圖</p><h4 id="5-1-註冊"><a href="#5-1-註冊" class="headerlink" title="5.1. 註冊"></a>5.1. 註冊</h4><p><img src="https://i.imgur.com/lWuWqTz.jpg" alt="register"></p><h4 id="5-2-登入"><a href="#5-2-登入" class="headerlink" title="5.2. 登入"></a>5.2. 登入</h4><p><img src="https://i.imgur.com/NcR2IZc.jpg" alt="login"></p><h4 id="5-3-檢視用戶資料"><a href="#5-3-檢視用戶資料" class="headerlink" title="5.3. 檢視用戶資料"></a>5.3. 檢視用戶資料</h4><p><img src="https://i.imgur.com/NZK6trW.jpg" alt="detail"></p><p>如此一來OAuth 2 型態的API完成了!</p><p>我肚子好餓，從下午邊做邊寫，寫到晚上九點了，我的天</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Day4&quot;&gt;&lt;a href=&quot;#Day4&quot; class=&quot;headerlink&quot; title=&quot;Day4&quot;&gt;&lt;/a&gt;Day4&lt;/h2&gt;&lt;h2 id=&quot;今日目標&quot;&gt;&lt;a href=&quot;#今日目標&quot; class=&quot;headerlink&quot; title=&quot;今日目標&quot;&gt;&lt;/a&gt;今日目標&lt;/h2&gt;&lt;p&gt;今天是要建立Laravel OAuth 2認證，以利於API資料索取安全控管，並且參照youtube影片&lt;a href=&quot;https://www.youtube.com/watch?v=0hGsLgnrk68&amp;t=80s&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Laravel 6 Api tutorial #2 Api authentication&lt;/a&gt;進行學習。
    
    </summary>
    
    
      <category term="實作課" scheme="https://dante0713.github.io/categories/%E5%AF%A6%E4%BD%9C%E8%AA%B2/"/>
    
    
      <category term="實作" scheme="https://dante0713.github.io/tags/%E5%AF%A6%E4%BD%9C/"/>
    
      <category term="30天學習日誌" scheme="https://dante0713.github.io/tags/30%E5%A4%A9%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C/"/>
    
      <category term="WEB API" scheme="https://dante0713.github.io/tags/WEB-API/"/>
    
      <category term="OAuth 2" scheme="https://dante0713.github.io/tags/OAuth-2/"/>
    
      <category term="Lavarel/Passport" scheme="https://dante0713.github.io/tags/Lavarel-Passport/"/>
    
  </entry>
  
  <entry>
    <title>30天API學習日誌 - 3</title>
    <link href="https://dante0713.github.io/2020/05/01/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-3/"/>
    <id>https://dante0713.github.io/2020/05/01/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-3/</id>
    <published>2020-04-30T16:18:56.000Z</published>
    <updated>2020-05-02T08:58:19.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><p>今天建立web api 內容，參照youtube影片<a href="https://www.youtube.com/watch?v=6qfE-lwRLuY" target="_blank" rel="noopener">Laravel 6 Api tutorial #1 basic API</a>進行學習<a id="more"></a>，<br>在進入之前，系統頁面告訴我他找不到/var/vision-bank/storage/logs/laravel.log檔案，以及權限不足問題，這是在建立laravel時沒有初始化cache,log的結果，使用指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#php artisan config:cache</span><br><span class="line">#php artisan config:clear</span><br><span class="line">#composer dump-autoload -o</span><br></pre></td></tr></table></figure><p>告訴laravel你要啟用config即可自動創造log檔，記得設定好權限給網頁開啟應該就沒有問題了</p><p>那今天教學影片中，大概分為五個步驟</p><ol><li>製造controller, router提供路徑讀取api</li><li>設定好該project用之Database設定檔</li><li>產生Model檔</li><li>寫好Model及controller的內容</li><li>測試API</li></ol><h3 id="1-製造controller-router提供路徑讀取api"><a href="#1-製造controller-router提供路徑讀取api" class="headerlink" title="1. 製造controller, router提供路徑讀取api"></a>1. 製造controller, router提供路徑讀取api</h3><h4 id="1-1-利用以下指令創造controller"><a href="#1-1-利用以下指令創造controller" class="headerlink" title="1.1. 利用以下指令創造controller"></a>1.1. 利用以下指令創造controller</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller Users</span><br></pre></td></tr></table></figure><h4 id="1-2-在Users-controller中寫入function-list-的空function"><a href="#1-2-在Users-controller中寫入function-list-的空function" class="headerlink" title="1.2. 在Users controller中寫入function list(){}的空function"></a>1.2. 在Users controller中寫入function list(){}的空function</h4><h4 id="1-3-在routes-api-php寫入‘Users-list’的路徑-gt-’list’，寫做"><a href="#1-3-在routes-api-php寫入‘Users-list’的路徑-gt-’list’，寫做" class="headerlink" title="1.3. 在routes/api.php寫入‘Users@list’的路徑=&gt;’list’，寫做"></a>1.3. 在routes/api.php寫入‘Users@list’的路徑=&gt;’list’，寫做</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&#39;list&#39;,&#39;Users@list&#39;);</span><br></pre></td></tr></table></figure><h3 id="2-設定好該project用之Database設定檔"><a href="#2-設定好該project用之Database設定檔" class="headerlink" title="2. 設定好該project用之Database設定檔"></a>2. 設定好該project用之Database設定檔</h3><p>該檔案位置在./.env檔中<br>記得</p><h4 id="2-1-設定好mysql的使用者-密碼"><a href="#2-1-設定好mysql的使用者-密碼" class="headerlink" title="2.1. 設定好mysql的使用者, 密碼"></a>2.1. 設定好mysql的使用者, 密碼</h4><h4 id="2-2-建立此專案專屬的mysql的資料庫，我在此-create-database-vision"><a href="#2-2-建立此專案專屬的mysql的資料庫，我在此-create-database-vision" class="headerlink" title="2.2. 建立此專案專屬的mysql的資料庫，我在此(create database vision;)"></a>2.2. 建立此專案專屬的mysql的資料庫，我在此(create database vision;)</h4><h4 id="2-3-接下來填寫好-env設定檔並使用artisan指令重啟project設定"><a href="#2-3-接下來填寫好-env設定檔並使用artisan指令重啟project設定" class="headerlink" title="2.3. 接下來填寫好.env設定檔並使用artisan指令重啟project設定"></a>2.3. 接下來填寫好.env設定檔並使用artisan指令重啟project設定</h4><p>我的測試例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">DB_CONNECTION&#x3D;mysql</span><br><span class="line">DB_HOST&#x3D;127.0.0.1</span><br><span class="line">DB_PORT&#x3D;3306</span><br><span class="line">DB_DATABASE&#x3D;&quot;vision&quot;</span><br><span class="line">DB_USERNAME&#x3D;&quot;root&quot;</span><br><span class="line">DB_PASSWORD&#x3D;&quot;root1234&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>artisan更新project設定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan serve</span><br></pre></td></tr></table></figure><h3 id="3-產生Model檔"><a href="#3-產生Model檔" class="headerlink" title="3. 產生Model檔"></a>3. 產生Model檔</h3><p>使用指令產生Model檔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model User</span><br></pre></td></tr></table></figure><h3 id="4-寫好Model及controller的內容"><a href="#4-寫好Model及controller的內容" class="headerlink" title="4. 寫好Model及controller的內容"></a>4. 寫好Model及controller的內容</h3><h4 id="4-1-先在剛建造的controller-Users-當中引入Model，之後即可開始測試"><a href="#4-1-先在剛建造的controller-Users-當中引入Model，之後即可開始測試" class="headerlink" title="4.1. 先在剛建造的controller(Users)當中引入Model，之後即可開始測試"></a>4.1. 先在剛建造的controller(Users)當中引入Model，之後即可開始測試</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">use App\User; &#x2F;&#x2F;引入</span><br><span class="line">class Users extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    function list()&#123;</span><br><span class="line">        return User::all(); &#x2F;&#x2F;controller回傳Model中包好的function資料</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="5-測試API"><a href="#5-測試API" class="headerlink" title="5. 測試API"></a>5. 測試API</h3><p>此時用 <a href="https://your-ip/api/list" target="_blank" rel="noopener">https://your-ip/api/list</a> 即可看到資料庫中user的資料</p><p>如此一來Base API完成了! 今天就先到這吧XD</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Day3&quot;&gt;&lt;a href=&quot;#Day3&quot; class=&quot;headerlink&quot; title=&quot;Day3&quot;&gt;&lt;/a&gt;Day3&lt;/h2&gt;&lt;p&gt;今天建立web api 內容，參照youtube影片&lt;a href=&quot;https://www.youtube.com/watch?v=6qfE-lwRLuY&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Laravel 6 Api tutorial #1 basic API&lt;/a&gt;進行學習
    
    </summary>
    
    
      <category term="實作課" scheme="https://dante0713.github.io/categories/%E5%AF%A6%E4%BD%9C%E8%AA%B2/"/>
    
    
      <category term="實作" scheme="https://dante0713.github.io/tags/%E5%AF%A6%E4%BD%9C/"/>
    
      <category term="30天學習日誌" scheme="https://dante0713.github.io/tags/30%E5%A4%A9%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C/"/>
    
      <category term="WEB API" scheme="https://dante0713.github.io/tags/WEB-API/"/>
    
  </entry>
  
  <entry>
    <title>30天API學習日誌 - 2</title>
    <link href="https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-2/"/>
    <id>https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-2/</id>
    <published>2020-04-30T09:56:37.000Z</published>
    <updated>2020-05-02T09:37:22.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>今天目標在把Laravel上線，決定先使用IP方式直連測試，安裝Laravel的過程中DigitalOcean的5美金專案，其記憶體空間不夠，升至15美金3GB才順利安裝好Laravel<a id="more"></a>，否則composer完全動不起來:(<br>接下來進行Nginx的連接，設定檔位置deault在 /etc/nginx/sites-enabled/default &amp; /etcnginx/sites-available/default 記得nginx其中進入專案的index.php/index.html檔案位置，不要放在http(linux身分)拜訪不到的資料夾中(例:root資料夾)<br>nginx找到public/index.php之後讀取的vendor資料夾找不到，才發現在使用指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project laravel&#x2F;laravel your-project-name --prefer-dist</span><br></pre></td></tr></table></figure><p>創立時發生出錯</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">laravel&#x2F;framework v7.8.1 requires ext-mbstring * -&gt; the requested PHP extension mbstring is missing from your system.</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>這類缺少PHP元件的問題都會導致laravel創立檔案時失去vendor資料夾，我們把缺的物件(php-mbstring,php-xml)用指令補齊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php-mbstring &amp; sudo apt-get install php-xml</span><br></pre></td></tr></table></figure><p>到這裡已經出現img.1畫面，雖然Database還沒設定好但基本的Laravel資料已可看見，今天就先到這裡。<br><img src="https://imgur.com/OP2XneQ.jpg" alt="img.1"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Day-2&quot;&gt;&lt;a href=&quot;#Day-2&quot; class=&quot;headerlink&quot; title=&quot;Day 2&quot;&gt;&lt;/a&gt;Day 2&lt;/h2&gt;&lt;p&gt;今天目標在把Laravel上線，決定先使用IP方式直連測試，安裝Laravel的過程中DigitalOcean的5美金專案，其記憶體空間不夠，升至15美金3GB才順利安裝好Laravel
    
    </summary>
    
    
      <category term="實作課" scheme="https://dante0713.github.io/categories/%E5%AF%A6%E4%BD%9C%E8%AA%B2/"/>
    
    
      <category term="實作" scheme="https://dante0713.github.io/tags/%E5%AF%A6%E4%BD%9C/"/>
    
      <category term="30天學習日誌" scheme="https://dante0713.github.io/tags/30%E5%A4%A9%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C/"/>
    
      <category term="DigitalOcean" scheme="https://dante0713.github.io/tags/DigitalOcean/"/>
    
  </entry>
  
  <entry>
    <title>30天API學習日誌 - 1</title>
    <link href="https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-1/"/>
    <id>https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-1/</id>
    <published>2020-04-30T09:52:43.000Z</published>
    <updated>2020-05-01T13:56:48.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>原本在DigitalOcean使用centos進行架設，當時沒想到使用ssh連接，反而用系統中的access console window下command，其過程總是延遲之後決定回頭設定ssh key</p><a id="more"></a><p>(注意: 在建立好的Droplets (機器在此平台接稱為Droplets，很有趣的設定) 要前往ACCOUNT-&gt;Settings-&gt;Security-&gt;SSH keys當中設定 (很難找找很久))，但設定完總是無法遠端連線(這邊嘗試過ssh-keygen以及puttygen兩種方式，皆失敗)，一直出現<a href="https://blog.csdn.net/qq_36523839/article/details/78885216" target="_blank" rel="noopener">Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)</a>警告，後來使用Ubuntu<br>+puttygen很快就解決了所有問題，也透過<a href="https://www.opencli.com/linux/ubuntu-16-04-install-nginx-mysql-php-lemp" target="_blank" rel="noopener">Ubuntu 16.04 安裝 Nginx, MySQL, PHP (LEMP)</a>這篇文章解決了 nginx-mysql-php 三項安裝，測試過後準備進行Laravel以及Vue.js框架建設，<br>但此時已經深夜2:19分，晚安。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h2&gt;&lt;p&gt;原本在DigitalOcean使用centos進行架設，當時沒想到使用ssh連接，反而用系統中的access console window下command，其過程總是延遲之後決定回頭設定ssh key&lt;/p&gt;
    
    </summary>
    
    
      <category term="實作課" scheme="https://dante0713.github.io/categories/%E5%AF%A6%E4%BD%9C%E8%AA%B2/"/>
    
    
      <category term="實作" scheme="https://dante0713.github.io/tags/%E5%AF%A6%E4%BD%9C/"/>
    
      <category term="30天學習日誌" scheme="https://dante0713.github.io/tags/30%E5%A4%A9%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C/"/>
    
      <category term="DigitalOcean" scheme="https://dante0713.github.io/tags/DigitalOcean/"/>
    
  </entry>
  
  <entry>
    <title>30天API學習日誌 - 0</title>
    <link href="https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-0/"/>
    <id>https://dante0713.github.io/2020/04/30/30%E5%A4%A9API%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C-0/</id>
    <published>2020-04-30T09:47:48.000Z</published>
    <updated>2020-05-01T13:56:46.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起由"><a href="#起由" class="headerlink" title="起由"></a>起由</h2><p>在公司低靡的環境下，試圖找尋學習的機會，並且在練習中習得新技能，目前舊有技能為以下列表</p><a id="more"></a><ul><li>模組化程式經驗</li><li>平台系統分析</li><li>使用Git版本控制經驗</li><li>使用(Docker container)PHP+Doctrine(ORM)+MySQL+MongoDB開發平台</li><li>利用Linux CentOS7 + Docker建立開發環境</li><li>使用NoSQL經驗(MongoDB)</li><li>Zend Framework 3 + Twig</li></ul><p>而希望在本次習得Web oauth REST API 以及 前端引擎Vue的運用方式。<br>此次預計建立一個影視版的人力銀行作為練習，架構為以下列表:</p><p>使用機器: DigitalOcean 15美元 Ubuntu 18.04.3<br>遠端操控: putty<br>前端引擎: vue =&gt; <a href="https://5xruby.tw/posts/how-to-create-maskmap-by-vuejs-and-osm/?fbclid=IwAR26ae2QYi_gMiUZxNHMGtD3gtMiQ7SvnveIr3lRdKNacPOg7olzrPXIWNc" target="_blank" rel="noopener">Vue 口罩地圖實作練習</a><br>後端web api: Laravel =&gt; <a href="https://laravel.tw/docs/4.2/quick#installation" target="_blank" rel="noopener">Laravel安裝</a>, <a href="https://www.youtube.com/watch?v=6qfE-lwRLuY&list=PL8p2I9GklV44rius9tPPXxPnuH0Yb27B4" target="_blank" rel="noopener">Laravel WEB API Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起由&quot;&gt;&lt;a href=&quot;#起由&quot; class=&quot;headerlink&quot; title=&quot;起由&quot;&gt;&lt;/a&gt;起由&lt;/h2&gt;&lt;p&gt;在公司低靡的環境下，試圖找尋學習的機會，並且在練習中習得新技能，目前舊有技能為以下列表&lt;/p&gt;
    
    </summary>
    
    
      <category term="實作課" scheme="https://dante0713.github.io/categories/%E5%AF%A6%E4%BD%9C%E8%AA%B2/"/>
    
    
      <category term="實作" scheme="https://dante0713.github.io/tags/%E5%AF%A6%E4%BD%9C/"/>
    
      <category term="30天學習日誌" scheme="https://dante0713.github.io/tags/30%E5%A4%A9%E5%AD%B8%E7%BF%92%E6%97%A5%E8%AA%8C/"/>
    
      <category term="WEB API" scheme="https://dante0713.github.io/tags/WEB-API/"/>
    
      <category term="Vue" scheme="https://dante0713.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
